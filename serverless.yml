# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: notes-app-api 

# User the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom: 
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1

# 'iamRoleStatements' defines the permission policy 
# for the Lambda function.
# In this case Lambda functions are granted with 
# permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  create:
    handler: handlers/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: handlers/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list: 
    handler: handlers/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: handlers/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete: 
    handler: handlers/delete.main
    events: 
      - http: 
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources: 
  # Adding CORS headers to API Gateway errors. Lambda functions
  # get invoked after API Gateway, so without this CORS headers 
  # won't be set at the API Gateway level - making debugging
  # difficult for HTTP errors at the API Gateway.
  - ${file(resources/api-gateway-errors.yml)}
